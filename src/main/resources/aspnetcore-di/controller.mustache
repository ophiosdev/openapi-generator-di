{{>partial_header}}
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
{{#operationResultTask}}
using System.Threading;
using System.Threading.Tasks;
{{/operationResultTask}}
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.Text.Json;

using {{packageName}}.Attributes;
using {{modelPackage}};

namespace {{apiPackage}}
{ {{#operations}}{{#description}}
    /// <summary>
    /// {{description}}
    /// </summary>
    [Description("{{.}}")]{{/description}}
    public interface I{{classname}}
    { {{#operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>{{#notes}}
        /// <remarks>{{.}}</remarks>{{/notes}}{{#allParams}}
        /// <param name="{{paramName}}">{{description}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>{{/allParams}}{{#operationResultTask}}{{#operationIsAsync}}
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>{{/operationIsAsync}}{{/operationResultTask}}{{#responses}}
        /// <response code="{{code}}">{{message}}</response>{{/responses}}
        public {{>returnType}} {{operationId}}({{#allParams}}{{&dataType}} {{paramName}}{{^-last}}, {{/-last}}{{#-last}}{{#operationResultTask}}{{#operationIsAsync}}, {{/operationIsAsync}}{{/operationResultTask}}{{/-last}}{{/allParams}}{{#operationResultTask}}{{#operationIsAsync}}CancellationToken cancellationToken{{/operationIsAsync}}{{/operationResultTask}});
        {{/operation}}
    }
{{/operations}}

  {{#operations}}
    [ApiController]
    public {{#classModifier}}{{.}} {{/classModifier}}class {{classname}}Controller : ControllerBase
    {
        private I{{classname}} _impl;

        public {{classname}}Controller(I{{classname}} implementation)
        {
            _impl = implementation;
        }

{{#operation}}
        [{{httpMethod}}]
        [Route("{{{basePathWithoutHost}}}{{{path}}}")]
{{#authMethods}}
{{#isApiKey}}
        [Authorize(Policy = "{{name}}")]
{{/isApiKey}}
{{#isBasicBearer}}
        [Authorize{{#scopes}}{{#-first}}(Roles = "{{/-first}}{{scope}}{{^-last}},{{/-last}}{{#-last}}"){{/-last}}{{/scopes}}]
{{/isBasicBearer}}
{{/authMethods}}
        {{#vendorExtensions.x-aspnetcore-consumes}}
        [Consumes({{&vendorExtensions.x-aspnetcore-consumes}})]
        {{/vendorExtensions.x-aspnetcore-consumes}}
        [ValidateModelState]
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        public {{#operationIsAsync}}async {{/operationIsAsync}}{{>returnType}} {{operationId}}({{#allParams}}{{>params/pathParam}}{{>params/queryParam}}{{>params/bodyParam}}{{>params/formParam}}{{>params/headerParam}}{{^-last}}{{^isCookieParam}}, {{/isCookieParam}}{{/-last}}{{#-last}}{{#operationResultTask}}{{#operationIsAsync}}, {{/operationIsAsync}}{{/operationResultTask}}{{/-last}}{{/allParams}}{{#operationResultTask}}{{#operationIsAsync}}CancellationToken cancellationToken{{/operationIsAsync}}{{/operationResultTask}})
        {
            {{#cookieParams}}
            var {{paramName}} = Request.Cookies["{{paramName}}"];
            {{#-last}}

            {{/-last}}
            {{/cookieParams}}
            return {{#operationIsAsync}}await {{/operationIsAsync}}_impl.{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{#-last}}{{#operationResultTask}}{{#operationIsAsync}}, {{/operationIsAsync}}{{/operationResultTask}}{{/-last}}{{/allParams}}{{#operationResultTask}}{{#operationIsAsync}}CancellationToken cancellationToken{{/operationIsAsync}}{{/operationResultTask}});
        }

        {{/operation}}
    }
{{/operations}}
}
